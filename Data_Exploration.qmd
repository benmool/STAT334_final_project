---
title: "Data_Exploration"
format: html
---

#### Introduction

We are going to look at two separate datasets in this project.

The first is the "College Basketball Dataset" from Kaggle by Andrew Sundberg, which contains data from various seasons of Division 1 college basketball. At the time of this writing, the csv contains data from the 2023-2024 regular season without any data from the NCAA tournament this year. We are going to be using the `cbb24.csv` for our analysis, as it contains data on all Division 1 NCAA college basketball teams for the 2023-2024 regular season. The link to the Kaggle dataset can be found [here](https://www.kaggle.com/datasets/andrewsundberg/college-basketball-dataset?resource=download). Variables from this dataset are:

  * `RK`: The ranking of the team at the end of the regular season according to barttorvik
  * `TEAM`: The name of the team
  * `CONF`: The conference the team is in
  * `G`: The number of games the team played in the regular season
  * `W`: The number of wins the team had in the regular season
  * `ADJOE`: Adjusted offensive efficeincy (points scored per 100 possessions vs avg D1 defense)
  * `ADJDE`: Adjusted defensive efficiency (points allowed per 100 possessions vs avg D1 offense)
  * `BARTHAG`: Power rating from barttorvik (chance of beating avg D1 team)
  * `EFG_O`: Effective field goal percentage shot
  * `EFG_D`: Effective field goal percentage allowed
  * `TOR`: Turnover percentage allowed (turnovers per 100 plays)
  * `TORD`: Turnover percentage forced (turnovers per 100 plays)
  * `ORB`: Offensive rebound percentage 
  * `DRB`: Defensive rebound percentage
  * `FTR`: Free throw rate
  * `FTRD`: Free throw rate allowed
  * `2P_O`: Two point percentage shot
  * `2P_D`: Two point percentage allowed
  * `3P_O`: Three point percentage shot
  * `3P_D`: Three point percentage allowed
  * `ADJ_T`: Adjusted tempo (possessions per 40 minutes)
  * `SEED`: The seed the team was given in the 2024 NCAA tournament
  
Our second dataset is taken from Github's `tidytuesday`, and is from Nishaan Amin's Kaggle dataset and analysis linked [here](https://www.kaggle.com/code/nishaanamin/bracketology-predicting-march-madness). The `tidytuesday` task specified two of Nishaan Amin's many datasets, and the link to the Github site can be found [here](https://github.com/rfordatascience/tidytuesday/blob/master/data/2024/2024-03-26/readme.md). These two dataframes contain data on past team results and the predictions the public has for this year's tournament (year 2024). The datasets are titled `team-results` and `public-picks`. For this project, we will only be looking at the `public-picks` data. Variables from this dataset are:

  * `YEAR`: The year of the NCAA tournament
  * `TEAMNO`: The team number
  * `TEAM`: The name of the team
  * `R64`: The percentage of the public that picked the team win in the Round of 64
  * `R32`: The percentage of the public that picked the team win in the Round of 32
  * `S16`: The percentage of the public that picked the team win in the Sweet 16
  * `E8`: The percentage of the public that picked the team win in the Elite 8
  * `F4`: The percentage of the public that picked the team win in the Final Four
  * `FINALS`: The percentage of the public that picked the team win in the Finals
  
We are trying to answer the question of what makes a team successful in the regular season, and how that success translates to the NCAA tournament. We look at various statistics from the regular season data to see if there are any trends that can be seen in the data. We also look at the public picks data to see if there are any trends in the data that can be seen. We can see if there are any specific statistics or groupings of statistics that the public tends to pick more often than others.

#### Data Exploration

First, let's start exploring some of the data.

```{r}
#| warning: false
library(tidytuesdayR)
tuesdata <- tidytuesdayR::tt_load('2024-03-26')
team_results <- tuesdata$'team-results'
public_picks <- tuesdata$'public-picks'
library(readr)
cbb24 <- read_csv("cbb24.csv")
```

Creating a shiny app:

  Start with radio buttons at top that have choices:
    1. observe full season data
    2. observe pulic picks data
    3. observe team results over past march madness tournaments

  For full regular season df
    Inputs:
      - can choose what statistic to look at (selectInput)
      - can choose from all D1 NCAA teams or just teams that made it to NCAA tournament (radioButton)
        - this radio button then influences if there is slider output available
      - can choose how many top teams to look at (sliderInput)
    Outputs:
      - correct graph of the chosen statistic with chosen number of teams included
      
  For public picks df
    Inputs:
      - can choose to look at individual teams or look at groups of teams (radioButton)
        _ "Would you like to manually select teams?"
        - this radio button then influences if there is slider output available
      - can choose what statistic to look at (selectInput)
      - can choose how many teams to look at (sliderInput)
      - can choose to rank teams in ascending (worst) or descending (best) order (radioButton)
    Outputs:
      - correct graph of the chosen statistic with 
      
  For past team results df
    Inputs:
      - 
    
```{r}
library(tidyverse)

# let's add a win percentage variable to cbb24
cbb24 <- cbb24 |> mutate(win_perc = W / G * 100)

# let's get all of the possible statistics choices we can look at from cbb24 (as a vector)
rs_stat_choices <- names(cbb24)[c(4:21, 23:24)]


# win_perc_plot_df <- cbb24 |> mutate(win_perc = W / G * 100) |>
#  arrange(desc(win_perc))

# ggplot(data = win_perc_plot_df, aes(x = win_perc)) + 
  
test <- cbb24 |> mutate(SEED = as.double(SEED))

statistics_plot_df <- cbb24 |>
  mutate(SEED = as.double(SEED)) |> 
  pivot_longer(cols = c(4:24), names_to = "stat", values_to = "value") |>
  filter(stat %in% rs_stat_choices) |>
  arrange(RK)



all_teams <- cbb24 |> mutate(TEAM = as.factor(TEAM)) |>
  pull(TEAM) |> levels()

tourney_teams <- public_picks |> mutate(TEAM = as.factor(TEAM)) |>
  pull(TEAM) |> levels()

public_picks_rounds <- names(public_picks)[c(4:9)]
```

```{r}
library(shiny)

ui <- fluidPage(
  sidebarLayout(
    sidebarPanel(
      radioButtons(
        inputId = "data",
        label = "Choose a dataset to explore:",
        choices = c("Full Regular Season Data", "Public Picks Data", "Past Team Results Data")
      ),
      
      # For regular season data
      conditionalPanel(
        condition = "input.data == 'Full Regular Season Data'",
        # select if we want to look at all teams or just tournament teams
        radioButtons(
          inputId = "tourney_or_no",
          label = "All NCAA teams or only NCAA tournament teams:",
          choices = c("All D1 NCAA Teams", "NCAA Tournament Teams")
        ),
        radioButtons(
          inputId = "manual_select",
          label = "Would you like to manually select teams?",
          choices = c("Yes", "No")
        ),
        # if looking at all teams
        conditionalPanel(
          condition = "input.manual_select == `No`",
          # select statistics to look at
          selectizeInput(
            inputId = "nms_regular_season_stat",
            label = "Choose statistic(s) to look at:",
            choices = rs_stat_choices,
            selected = "win_perc",
            multiple = TRUE
          ),
          # select statistic to order by
          selectInput(
            inputId = "nms_regular_season_ordering",
            label = "Order teams by:",
            choices = NULL
          ),
          sliderInput(
            inputId = "nms_top_teams",
            label = "How many top teams would you like to look at?",
            min = 1,
            max = 50,
            value = 10
          )
        ),
        # if looking at tournament teams
        conditionalPanel(
          condition = "input.manual_select == `Yes`",
          # select teams to look at
          selectizeInput(
            inputId = "ms_team_name_reg_season",
            label = "Choose teams to look at:",
            choices = NULL,
            multiple = TRUE
          ),
          # select statistics to look at
          selectizeInput(
            inputId = "ms_regular_season_stat",
            label = "Choose statistic(s) to look at:",
            choices = rs_stat_choices,
            selected = "win_perc",
            multiple = TRUE
          ),
          # select statistic to order by
          selectInput(
            inputId = "ms_regular_season_ordering",
            label = "Order teams by:",
            choices = NULL
          ),
          # select how many top teams to look at
          sliderInput(
            inputId = "ms_top_teams",
            label = "How many top teams would you like to look at?",
            min = 1,
            max = 50,
            value = 10
          )
        )
      ),
      
      # For public picks data
      conditionalPanel(
        condition = "input.data == 'Public Picks Data'",
        # select if we want to look at individual teams or groups of teams
        selectizeInput(
          inputId = "public_picks_teams",
          label = "Choose teams to look at:",
          choices = tourney_teams,
          multiple = TRUE
        ),
        checkboxGroupInput(
          inputId = "public_picks_rounds",
          label = "Choose rounds to look at:",
          choices = public_picks_rounds
        ),
        selectInput(
          inputId = "public_picks_ordered_by",
          label = "What round would you like to order the teams by?",
          choices = NULL
        ),
        selectInput(
          inputId = "public_picks_ordering",
          label = "What order would you like to rank the teams in?",
          choices = c("Ascending", "Descending")
        )
      ),
      
      # For past team results data
      conditionalPanel(
        condition = "input.data == 'Past Team Results Data'",
      )
    ),
    mainPanel(
      conditionalPanel(
        condition = "input.data == 'Full Regular Season Data'",
        dataTableOutput(outputId = "regular_season_table"),
        plotOutput(outputId = "regular_season_plot")
      ),
      conditionalPanel(
        condition = "input.data == 'Public Picks Data'",
        dataTableOutput(outputId = "public_picks_table"),
        plotOutput(outputId = "public_picks_plot")
      ),
      conditionalPanel(
        condition = "input.data == 'Past Team Results Data'",
        dataTableOutput(outputId = "past_team_results_table"),
        plotOutput(outputId = "past_team_results_plot")
      )
    )
  )
)


server <- function(input, output, session) {
  
  observeEvent(input$manual_select, {
    if (input$manual_select == "No") {
      updateSelectizeInput(session, "nms_regular_season_stat", choices = rs_stat_choices)
    } else if (input$manual_select == "Yes") {
      if (input$tourney_or_no == "All D1 NCAA Teams") {
        teams_choices <- all_teams
      } else if (input$tourney_or_no == "NCAA Tournament Teams") {
        teams_choices <- tourney_teams
      }
      updateSelectizeInput(session, "ms_team_name_reg_season", choices = teams_choices)
      updateSelectizeInput(session, "ms_regular_season_stat", choices = rs_stat_choices)
    }
  })
  
  observeEvent(input$ms_regular_season_stat, {
    updateSelectInput(session, "ms_regular_season_ordering", choices = input$ms_regular_season_stat)
  })
  
  observeEvent(input$nms_regular_season_stat, {
    updateSelectInput(session, "nms_regular_season_ordering", choices = input$nms_regular_season_stat)
  })
  
  regular_season_reactive <- reactive({
    if(input$tourney_or_no == "All D1 NCAA Teams") {
      if(input$manual_select == "No") {
        output_table <- cbb24 |> 
          select(TEAM, CONF, input$nms_regular_season_stat) |>
          mutate(TEAM = fct.reorder(TEAM, input$nms_regular_season_stat)) |>
          slice(1:input$nms_top_teams)
      } else {
        output_table <- cbb24 |>
          select(TEAM, CONF, input$ms_regular_season_stat) |>
          filter(TEAM %in% input$ms_team_name_reg_season) |>
          arrange(desc(input$ms_regular_season_ordering)) |>
          slice(1:input$ms_top_teams)
      }
    } else {
      if(input$manual_select == "No") {
        output_table <- cbb24 |>
          filter(TEAM %in% public_picks$TEAM) |>
          select(TEAM, CONF, input$nms_regular_season_stat) |>
          arrange(desc(input$nms_regular_season_ordering)) |>
          slice(1:input$nms_top_teams)
      } else {
        output_table <- cbb24 |>
          filter(TEAM %in% public_picks$TEAM) |>
          select(TEAM, CONF, input$ms_regular_season_stat) |>
          filter(TEAM %in% input$ms_team_name_reg_season) |>
          arrange(desc(input$ms_regular_season_ordering)) |>
          slice(1:input$ms_top_teams)
      }
    }
    output_table
  })
  
  observeEvent(input$public_picks_rounds, {
    updateSelectInput(session, "public_picks_ordered_by", choices = input$public_picks_rounds)
  })
  
  output$regular_season_table <- renderDataTable({
    regular_season_reactive()
  })
  
  
  
}

shinyApp(ui, server)
```


```{r}
regular_season_reactive <- reactive({
    if(input$tourney_or_no == "All D1 NCAA Teams") {
      cbb24 |>
        select(TEAM, CONF, input$regular_season_stat) |>
        filter(TEAM %in% input$team_name_reg_season) |>
        slice(1:input$top_teams)
    } else {
      cbb24 |>
        filter(TEAM %in% public_picks$TEAM) |>
        select(TEAM, CONF, input$regular_season_stat) |>
        filter(TEAM %in% input$team_name_reg_season) |>
        slice(1:input$top_teams)
    }
  })

regular_season_reactive <- reactive({
    if(input$tourney_or_no == "All D1 NCAA Teams") {
      if(input$team_name_reg_season == "All") {
        cbb24 |>
          select(TEAM, CONF, input$regular_season_stat) |>
          slice(1:input$top_teams)
      } else {
        cbb24 |>
          select(TEAM, CONF, input$regular_season_stat) |>
          filter(TEAM %in% input$team_name_reg_season) |>
          slice(1:input$top_teams)
      }
    } else {
      if(input$team_name_reg_season == "All") {
        cbb24 |>
          filter(TEAM %in% public_picks$TEAM) |>
          select(TEAM, CONF, input$regular_season_stat) |>
          slice(1:input$top_teams)
      } else {
        cbb24 |>
          filter(TEAM %in% public_picks$TEAM) |>
          select(TEAM, CONF, input$regular_season_stat) |>
          filter(TEAM %in% input$team_name_reg_season) |>
          slice(1:input$top_teams)
      }
    }
  })
```


```{r}


output_table <- public_picks |>
        select(TEAM, any_of(input$public_picks_rds)) |>
        filter(TEAM %in% input$public_picks_teams)
```

  

