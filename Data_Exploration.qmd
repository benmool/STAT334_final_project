---
title: "Data_Exploration"
format: html
---

#### Introduction

In this project, I am going to explore....


We are going to look at two separate datasets in this project. The first is taken from Github's `tidytuesday` list of datasets, which is from Nishaan Amin's Kaggle dataset and analysis linked [here](https://www.kaggle.com/code/nishaanamin/bracketology-predicting-march-madness). The `tidytuesday` task specified two of Nishaan Amin's many datasets, and the link to the Github site can be found [here](https://github.com/rfordatascience/tidytuesday/blob/master/data/2024/2024-03-26/readme.md). These two dataframes contain data on past team results and the predictions the public has for this year's tournament (year 2024).

I am also going to be using a "College Basketball Dataset" from Kaggle by Andrew Sundberg, which contains data from various seasons of Division 1 college basketball. Currently, the csv contains data from the 2023-2024 regular season without any data from the NCAA tournament. The link to the Kaggle dataset online can be found [here](https://www.kaggle.com/datasets/andrewsundberg/college-basketball-dataset?resource=download).

#### Data Exploration

First, let's start exploring some of the data.

```{r}
#| warning: false
library(tidytuesdayR)
tuesdata <- tidytuesdayR::tt_load('2024-03-26')
team_results <- tuesdata$'team-results'
public_picks <- tuesdata$'public-picks'
library(readr)
cbb24 <- read_csv("cbb24.csv")
```

Creating a shiny app:

  Start with radio buttons at top that have choices:
    1. observe full season data
    2. observe pulic picks data
    3. observe team results over past march madness tournaments

  For full regular season df
    Inputs:
      - can choose what statistic to look at (selectInput)
      - can choose from all D1 NCAA teams or just teams that made it to NCAA tournament (radioButton)
        - this radio button then influences if there is slider output available
      - can choose how many top teams to look at (sliderInput)
    Outputs:
      - correct graph of the chosen statistic with chosen number of teams included
      
  For public picks df
    Inputs:
      - can choose to look at individual teams or look at groups of teams (radioButton)
        _ "Would you like to manually select teams?"
        - this radio button then influences if there is slider output available
      - can choose what statistic to look at (selectInput)
      - can choose how many teams to look at (sliderInput)
      - can choose to rank teams in ascending (worst) or descending (best) order (radioButton)
    Outputs:
      - correct graph of the chosen statistic with 
      
  For past team results df
    Inputs:
      - 
    
```{r}
library(tidyverse)

# let's add a win percentage variable to cbb24
cbb24 <- cbb24 |> mutate(win_perc = W / G * 100)

# let's get all of the possible statistics choices we can look at from cbb24 (as a vector)
rs_stat_choices <- names(cbb24)[c(4:22, 24)]


win_perc_plot_df <- cbb24 |> mutate(win_perc = W / G * 100) |>
  arrange(desc(win_perc))

ggplot(data = win_perc_plot_df, aes(x = win_perc)) + 
  
```

```{r}
library(shiny)

ui <- fluidPage(
  sidebarLayout(
    sidebarPanel(
      radioButtons(
        inputId = "data",
        label = "Choose a dataset to explore:",
        choices = c("Full Regular Season Data", "Public Picks Data", "Past Team Results Data")
      ),
      
      
      # For regular season data
      conditionalPanel(
        condition = "input.data == 'Full Regular Season Data'",
        radioButtons(
          inputId = "team",
          label = "All NCAA teams or only NCAA tournament teams:",
          choices = c("All D1 NCAA Teams", "NCAA Tournament Teams")
        ),
        selectizeInput(
          inputId = "stat",
          label = "Choose a statistic to look at:",
          choices = rs_stat_choices,
          selected = "win_perc",
          multiple = TRUE
        ),
        sliderInput(
          inputId = "top_teams",
          label = "How many top teams would you like to look at?",
          min = 1,
          max = 50,
          value = 10
        ),
        
      ),
      
      # For public picks data
      conditionalPanel(
        condition = "input.data == 'Public Picks Data'",
        
      ),
      
      # For past team results data
      conditionalPanel(
        condition = "input.data == 'Past Team Results Data'",
      )
    ),
    mainPanel(
        conditionalPanel(
          condition = "input.data == 'Full Regular Season Data'",
          dataTableOutput(outputId = "regular_season_table")
      )
    )
        
  )
)


server <- function(input, output, session) {
  
  regular_season_reactive <- reactive({
    if(input$team == "All D1 NCAA Teams") {
      cbb24 |>
        select(TEAM, CONF, input$stat) |>
        slice(1:input$top_teams)
    } else {
      cbb24 |>
        filter(TEAM %in% public_picks$TEAM) |>
        select(TEAM, CONF, input$stat) |>
        slice(1:input$top_teams)
    }
  })
  
  output$regular_season_table <- renderDataTable({
    regular_season_reactive()
  })
  
}

shinyApp(ui, server)
```

  

